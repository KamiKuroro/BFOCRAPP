{"ast":null,"code":"var _jsxFileName = \"/Users/kamikuroro/bfocr-app/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nvar Tesseract = window.Tesseract;\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = event => {\n      if (event.target.files[0]) {\n        var uploads = [];\n\n        for (var key in event.target.files) {\n          if (!event.target.files.hasOwnProperty(key)) continue;\n          let upload = event.target.files[key];\n          uploads.push(URL.createObjectURL(upload));\n        }\n\n        this.setState({\n          uploads: uploads\n        });\n      } else {\n        this.setState({\n          uploads: []\n        });\n      }\n    };\n\n    this.generateText = () => {\n      let uploads = this.state.uploads;\n\n      for (var i = 0; i < uploads.length; i++) {\n        Tesseract.recognize(uploads[i], 'eng', {\n          logger: m => console.log(m)\n        }).catch(err => {\n          console.error(err);\n        }).then(result => {\n          // Get full output\n          let text = result.text; // Get codes\n\n          let pattern = /\\b\\w{10,10}\\b/g;\n          let patterns = result.text.match(pattern); // Update state\n\n          this.setState({\n            patterns: this.state.patterns.concat(patterns)\n          });\n          console.log(result.text);\n        });\n      }\n    };\n\n    this.state = {\n      uploads: [],\n      patterns: [],\n      documents: []\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"app\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"header\", {\n      className: \"header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }\n    }, \"My OCR App\")), /*#__PURE__*/React.createElement(\"section\", {\n      className: \"hero\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      className: \"fileUploaderContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }\n    }, \"Click here to upload documents\", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"file\",\n      id: \"fileUploader\",\n      onChange: this.handleChange,\n      multiple: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }\n    }, this.state.uploads.map((value, index) => {\n      return /*#__PURE__*/React.createElement(\"img\", {\n        key: index,\n        src: value,\n        width: \"100px\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 22\n        }\n      });\n    })), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"button\",\n      onClick: this.generateText,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }\n    }, \"Generate\")), /*#__PURE__*/React.createElement(\"section\", {\n      className: \"results\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/kamikuroro/bfocr-app/src/App.js"],"names":["React","Component","Tesseract","window","App","constructor","props","handleChange","event","target","files","uploads","key","hasOwnProperty","upload","push","URL","createObjectURL","setState","generateText","state","i","length","recognize","logger","m","console","log","catch","err","error","then","result","text","pattern","patterns","match","concat","documents","render","map","value","index"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nvar Tesseract = window.Tesseract;\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      uploads: [],\n      patterns: [],\n      documents: []\n    };\n  }\n\n  handleChange = (event) => {\n    if (event.target.files[0]) {\n      var uploads = []\n      for (var key in event.target.files) {\n        if (!event.target.files.hasOwnProperty(key)) continue;\n        let upload = event.target.files[key]\n        uploads.push(URL.createObjectURL(upload))\n      }\n      this.setState({\n        uploads: uploads\n      })\n    } else {\n      this.setState({\n        uploads: []\n      })\n    }\n  }\n\n  generateText = () => {\n    let uploads = this.state.uploads\n  \n    for(var i = 0; i < uploads.length; i++) {\n      Tesseract.recognize(\n        uploads[i], \n        'eng',\n        { logger: m => console.log(m) }\n      )\n      .catch(err => {\n        console.error(err)\n      })\n      .then(result => { \n        // Get full output\n        let text = result.text\n  \n        // Get codes\n        let pattern = /\\b\\w{10,10}\\b/g\n        let patterns = result.text.match(pattern);\n  \n        // Update state\n        this.setState({ \n          patterns: this.state.patterns.concat(patterns),\n        })\n\n        console.log(result.text);\n      })\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <header className=\"header\">\n          <h1>My OCR App</h1>\n        </header>\n\n        { /* File uploader */ }\n        <section className=\"hero\">\n          <label className=\"fileUploaderContainer\">\n            Click here to upload documents\n            <input type=\"file\" id=\"fileUploader\" onChange={this.handleChange} multiple />\n          </label>\n\n          <div>\n            { this.state.uploads.map((value, index) => {\n              return <img key={index} src={value} width=\"100px\" />\n            }) }\n          </div>\n\n          <button className=\"button\" onClick={this.generateText}>Generate</button>\n        </section>\n\n        { /* Results */ }\n        <section className=\"results\">\n\n        </section>\n      </div>\n    )\n  }\n\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}